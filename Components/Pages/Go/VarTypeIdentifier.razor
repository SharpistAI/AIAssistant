@page "/var-type-identifier"
@rendermode InteractiveServer

<PageTitle>Using the Var Type Identifier</PageTitle>

<div class="card-body">

    <div class="container" id="main-content">
    <h1>Using the Var Type Identifier</h1>



    <div class="row">
        <div id="content" class="col-9">
            <div class="line-numbers">
                <p><a id="intro">&nbsp;</a></p>
                <h2 id="the-var-keyword">The Var Keyword</h2>
                <p>Starting with Java SE 10, you can use the <code>var</code> type identifier to declare a local
                    variable. In
                    doing so, you let the compiler decide what is the real type of the variable you create. Once
                    created, this
                    type cannot be changed.</p>
                <p>Consider the following example.</p>
                <pre><code class="language-java">String message = &quot;Hello world!&quot;;
Path path = Path.of(&quot;debug.log&quot;);
InputStream stream = Files.newInputStream(path);
</code></pre>
                <p>In that case, having to declare the explicit types of the three variables <code>message</code>,
                    <code>path</code> and <code>stream</code> is redundant.
                </p>
                <p>With the <code>var</code> type identifier the previous code can be written as follow:</p>
                <pre><code class="language-java">var message = &quot;Hello world!&quot;;
var path = Path.of(&quot;debug.log&quot;);
var stream = Files.newInputStream(path);
</code></pre>
                <p><a id="examples">&nbsp;</a></p>
                <h2 id="examples-with-var">Examples with Var</h2>
                <p>The following example shows you how you can use the <code>var</code> type identifier to make your
                    code
                    simpler to read. Here the <code>strings</code> variable is given the type <a
                        href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/util/List.html"
                        target="_blank" rel="noopener noreferrer"><code>List&lt;String&gt;</code></a> and the
                    <code>element</code> variable the type
                    <a href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/lang/String.html"
                        target="_blank" rel="noopener noreferrer"><code>String</code></a>.
                </p>
                <pre><code class="language-java">var list = List.of(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;);
for (var element: list) {
  System.out.println(element);
}
</code></pre>
                <p>On this example, the <code>path</code> variable is of type <a
                        href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/nio/file/Path.html"
                        target="_blank" rel="noopener noreferrer"><code>Path</code></a>, and the <code>stream</code>
                    variable is of type <a
                        href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/io/InputStream.html"
                        target="_blank" rel="noopener noreferrer"><code>InputStream</code></a>.</p>
                <pre><code class="language-java">var path = Path.of(&quot;debug.log&quot;);
try (var stream = Files.newInputStream(path)) {
  // process the file
}
</code></pre>
                <p>Note that on the two previous examples, you have used <code>var</code> to declare a variable in a for
                    statement and in a try-with-resources statement. These two statements are covered later in this
                    tutorial.</p>
                <p><a id="restrictions">&nbsp;</a></p>
                <h2 id="restrictions-on-using-var">Restrictions on Using Var</h2>
                <p>There are restrictions on the use of the <code>var</code> type identifier.</p>
                <ol>
                    <li>You can only use it for <em>local variables</em> declared in methods, constructors and
                        initializer blocks.
                    </li>
                    <li><code>var</code> cannot be used for fields, not for method or constructor parameters.</li>
                    <li>The compiler must be able to choose a type when the variable is declared. Since
                        <code>null</code> has no
                        type, the variable must have an initializer.
                    </li>
                </ol>
                <p>Following the these restriction, the following class does not compile, because using <code>var</code>
                    as a
                    type identifier is not possible for a field or a method parameter.</p>
                <pre><code class="language-java">public class User  {
  private var name = &quot;Sue&quot;;

  public void setName(var name) {
      this.name = name;
  }
}
</code></pre>
                <p>The same goes for the following code.</p>
                <p>In that case, the compiler cannot guess the real type of <code>message</code> because is lacks an
                    initializer.</p>
                <pre><code class="language-java">public String greetings(int message) {
  var greetings;
  if (message == 0) {
      greetings = &quot;morning&quot;;
  } else {
      greetings = &quot;afternoon&quot;;
  }
  return &quot;Good &quot; + greetings;
}
</code></pre>
            </div>
        </div>

<div id="sidemenu" class="col-3">
</div>

</div>
</div>
</div>

<div class="card text-center m-3">
    <div class="card-body">
        <div class="row">
            <div class="col-sm-12">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Question 1</h5>
                        <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
                        <a href="#" class="btn btn-primary">Go somewhere</a>
                    </div>
                </div>
            </div>
            <div class="col-sm-12">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Question 2</h5>
                        <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
                        <a href="#" class="btn btn-primary">Go somewhere</a>
                    </div>
                </div>
            </div>
            <div class="col-sm-12">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Question 2</h5>
                        <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
                        <a href="#" class="btn btn-primary">Go somewhere</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
