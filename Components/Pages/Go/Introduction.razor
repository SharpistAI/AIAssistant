@page "/go-introduction"
@using System.Text.Json.Serialization
@using AIAssistant.Model
@using Newtonsoft.Json
@rendermode InteractiveServer

<PageTitle>Introduction</PageTitle>

<div class="card-body">



    <h2 id="Introduction">Introduction</h2>

    <p>
        This is the reference manual for the Go programming language.
        The pre-Go1.18 version, without generics, can be found
        <a href="/doc/go1.17_spec.html">here</a>.
        For more information and other documents, see <a href="/">go.dev</a>.
    </p>

    <p>
        Go is a general-purpose language designed with systems programming
        in mind. It is strongly typed and garbage-collected and has explicit
        support for concurrent programming.  Programs are constructed from
        <i>packages</i>, whose properties allow efficient management of
        dependencies.
    </p>

    <p>
        The syntax is compact and simple to parse, allowing for easy analysis
        by automatic tools such as integrated development environments.
    </p>

    <h2 id="Notation">Notation</h2>
    <p>
        The syntax is specified using a
        <a href="https://en.wikipedia.org/wiki/Wirth_syntax_notation">variant</a>
        of Extended Backus-Naur Form (EBNF):
    </p>

<pre class="grammar">
Syntax      = { Production } .
Production  = production_name "=" [ Expression ] "." .
Expression  = Term { "|" Term } .
Term        = Factor { Factor } .
Factor      = production_name | token [ "…" token ] | Group | Option | Repetition .
Group       = "(" Expression ")" .
Option      = "[" Expression "]" .
Repetition  = "{" Expression "}" .
</pre>

    <p>
        Productions are expressions constructed from terms and the following
        operators, in increasing precedence:
    </p>
<pre class="grammar">
|   alternation
()  grouping
[]  option (0 or 1 times)
{}  repetition (0 to n times)
</pre>

    <p>
        Lowercase production names are used to identify lexical (terminal) tokens.
        Non-terminals are in CamelCase. Lexical tokens are enclosed in
        double quotes <code>""</code> or back quotes <code>``</code>.
    </p>

    <p>
        The form <code>a … b</code> represents the set of characters from
        <code>a</code> through <code>b</code> as alternatives. The horizontal
        ellipsis <code>…</code> is also used elsewhere in the spec to informally denote various
        enumerations or code snippets that are not further specified. The character <code>…</code>
        (as opposed to the three characters <code>...</code>) is not a token of the Go
        language.
    </p>

    <p>
        A link of the form [<a href="#Language_versions">Go 1.xx</a>] indicates that a described
        language feature (or some aspect of it) was changed or added with language version 1.xx and
        thus requires at minimum that language version to build.
        For details, see the <a href="#Language_versions">linked section</a>
        in the <a href="#Appendix">appendix</a>.
    </p>

    <h2 id="Source_code_representation">Source code representation</h2>

    <p>
        Source code is Unicode text encoded in
        <a href="https://en.wikipedia.org/wiki/UTF-8">UTF-8</a>. The text is not
        canonicalized, so a single accented code point is distinct from the
        same character constructed from combining an accent and a letter;
        those are treated as two code points.  For simplicity, this document
        will use the unqualified term <i>character</i> to refer to a Unicode code point
        in the source text.
    </p>
    <p>
        Each code point is distinct; for instance, uppercase and lowercase letters
        are different characters.
    </p>
    <p>
        Implementation restriction: For compatibility with other tools, a
        compiler may disallow the NUL character (U+0000) in the source text.
    </p>
    <p>
        Implementation restriction: For compatibility with other tools, a
        compiler may ignore a UTF-8-encoded byte order mark
        (U+FEFF) if it is the first Unicode code point in the source text.
        A byte order mark may be disallowed anywhere else in the source.
    </p>

    <h3 id="Characters">Characters</h3>

    <p>
        The following terms are used to denote specific Unicode character categories:
    </p>
<pre class="ebnf">
<a id="newline">newline</a>        = /* the Unicode code point U+000A */ .
<a id="unicode_char">unicode_char</a>   = /* an arbitrary Unicode code point except newline */ .
<a id="unicode_letter">unicode_letter</a> = /* a Unicode code point categorized as "Letter" */ .
<a id="unicode_digit">unicode_digit</a>  = /* a Unicode code point categorized as "Number, decimal digit" */ .
</pre>

    <p>
        In <a href="https://www.unicode.org/versions/Unicode8.0.0/">The Unicode Standard 8.0</a>,
        Section 4.5 "General Category" defines a set of character categories.
        Go treats all characters in any of the Letter categories Lu, Ll, Lt, Lm, or Lo
        as Unicode letters, and those in the Number category Nd as Unicode digits.
    </p>

    <h3 id="Letters_and_digits">Letters and digits</h3>

    <p>
        The underscore character <code>_</code> (U+005F) is considered a lowercase letter.
    </p>
<pre class="ebnf">
<a id="letter">letter</a>        = <a href="#unicode_letter" class="noline">unicode_letter</a> | "_" .
<a id="decimal_digit">decimal_digit</a> = "0" … "9" .
<a id="binary_digit">binary_digit</a>  = "0" | "1" .
<a id="octal_digit">octal_digit</a>   = "0" … "7" .
<a id="hex_digit">hex_digit</a>     = "0" … "9" | "A" … "F" | "a" … "f" .
</pre>


</div>

<div class="card text-center m-3">
    <div class="card-body">
        <div class="row">
            @foreach (var pair in questionAnswerPairs)
            {
                <div class="col-sm-12">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Question:</h5>
                            <p class="card-text">@pair.Key</p>
                            <input type="text" @bind="questionAnswerPairs[pair.Key]" />
                        </div>
                    </div>
                </div>
            }
            <button @onclick="Callback">Submit</button>
            @if (IsAnswerExist)
            {
                <div class="col-sm-12">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Number of correct answer:</h5>
                            <p class="card-text">@correctAnswers</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
@code
{
    string filename = "Go Introduction.html";
    string keyword = "Go language";
    string questionType = "FreeAnswer";
    int correctAnswers = 0;
    bool IsAnswerExist = false;
    Dictionary<string, string> questionAnswerPairs = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        var client = new AiClient();
        var response = await client.GetResponseAsync(filename, keyword, questionType);
        Root myDeserializedClass = JsonConvert.DeserializeObject<Root>(response);
        var questions = Parser.ParseFreeAnswer(myDeserializedClass.Content);
        foreach (var question in questions)
        {
            questionAnswerPairs.Add(question, string.Empty);
        }
    }

    private async Task EvalAnswer()
    {
        var client = new AiClient();
        foreach (var questionAnswerPair in questionAnswerPairs)
        {
            var response = await client.EvaluateAnswerAsync(filename, keyword, questionAnswerPair.Key, questionAnswerPair.Value);
            Root jsonObject = JsonConvert.DeserializeObject<Root>(response);
            if (string.IsNullOrWhiteSpace(jsonObject.Content))
            {
                if (jsonObject.Content.Contains("True"))
                {
                    correctAnswers++;
                }
            }
        }
    }

    private void Callback()
    {
        EvalAnswer().Wait();
        StateHasChanged();
    }
}
